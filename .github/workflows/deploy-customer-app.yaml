name: Deploy customer application
run-name: Deploy customer application

on:
  workflow_dispatch:
    inputs:
      customer_app_blob:
        description: "gsutil URI of customer app config blob object."
        type: string
        required: true
      customer_app_name:
        description: "Name of the customer app."
        type: string
        required: true
      fe_github_user:
        description: "GitHub user for frontend application."
        type: string
      fe_github_repo:
        description: "GitHub repo for frontend application."
        type: string
      be_github_user:
        description: "GitHub user for backend application."
        type: string
      be_github_repo:
        description: "GitHub repo for backend application."
        type: string

jobs:
  generate_deployment_files:
    runs-on: ubuntu-22.04
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_RUNNER_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Get customer app configuration file
        run: |
          gsutil cat ${{ inputs.customer_app_blob }} > ${{ github.workspace }}/app_config.yaml
          gsutil cat ${{ inputs.customer_app_blob }}.env > ${{ github.workspace }}/.env

      - name: Checkout template-generator repository
        uses: actions/checkout@v3
        with:
          repository: uet-app-distributor/template-generator
          path: template-generator
          ref: main

      - name: Generate Dockerfiles, initial job and manifest files
        run: |
          cd ${{ github.workspace }}/template-generator
          pip install -r requirements.txt
          python3 main.py --app-config ${{ github.workspace }}/app_config.yaml \
                          --output-dockerfile ca-dockerfile \
                          --output-initial-job ca-initial-job.yaml \
                          --output-manifest ca-manifest.yaml

      - uses: actions/upload-artifact@v3
        with:
          name: deployment-artifacts
          path: |
            ${{ github.workspace }}/template-generator/output-*
            ${{ github.workspace }}/.env

  deploy_frontend:
    if: ${{ inputs.fe_github_repo }} != 'none' && ${{ inputs.fe_github_user }} != 'none'
    needs: [generate_deployment_files]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout customer app frontend repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.fe_github_user }}/${{ inputs.fe_github_repo }}
          path: customer-app-frontend
          ref: main

      - uses: actions/download-artifact@v3
        with:
          name: deployment-artifacts
          path: ${{ github.workspace }}/customer-app-frontend

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ${{ github.workspace }}/customer-app-frontend
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fe-${{ inputs.customer_app_name }}:latest
          file: ${{ github.workspace }}/customer-app-frontend/template-generator/output-frontend-ca-dockerfile
          push: true

      - name: Send job manifest file to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DISTRIBUTOR_INSTANCE_HOST }}
          port: ${{ secrets.DISTRIBUTOR_INSTANCE_SSH_PORT }}
          key: ${{ secrets.DISTRIBUTOR_INSTANCE_SSH_KEY }}
          username: ${{ secrets.DISTRIBUTOR_INSTANCE_PRIMARY_USER }}
          source: "customer-app-frontend/template-generator/output-frontend-ca-manifest.yaml, customer-app-frontend/template-generator/output-ca-initial-job.yaml"
          target: /tmp/customer_app_manifest/${{ github.run_id }}/${{ github.run_number }}
          strip_components: 2

      - name: Deploy customer initial job and application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DISTRIBUTOR_INSTANCE_HOST }}
          port: ${{ secrets.DISTRIBUTOR_INSTANCE_SSH_PORT }}
          key: ${{ secrets.DISTRIBUTOR_INSTANCE_SSH_KEY }}
          username: ${{ secrets.DISTRIBUTOR_INSTANCE_PRIMARY_USER }}
          script: |
            ls -la /tmp/customer_app_manifest/${{ github.run_id }}/${{ github.run_number }}
            microk8s kubectl apply -f /tmp/customer_app_manifest/${{ github.run_id }}/${{ github.run_number }}/output-ca-initial-job.yaml
            microk8s kubectl wait --for=condition=complete -f /tmp/customer_app_manifest/${{ github.run_id }}/${{ github.run_number }}/output-ca-initial-job.yaml
            microk8s kubectl apply -f /tmp/customer_app_manifest/${{ github.run_id }}/${{ github.run_number }}/output-frontend-ca-manifest.yaml

  deploy_backend:
    if: ${{ inputs.be_github_repo }} != 'none' && ${{ inputs.be_github_user }} != 'none'
    needs: [generate_deployment_files]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout customer app backend repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.be_github_user }}/${{ inputs.be_github_repo }}
          path: customer-app-backend
          ref: main

      - uses: actions/download-artifact@v3
        with:
          name: deployment-artifacts
          path: ${{ github.workspace }}/customer-app-backend

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - run: |
          ls -la 
          ls -la ${{ github.workspace }}/customer-app-backend
          ls -la ${{ github.workspace }}/customer-app-backend/template-generator

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ${{ github.workspace }}/customer-app-backend
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/be-${{ inputs.customer_app_name }}:latest
          file: ${{ github.workspace }}/customer-app-backend/template-generator/output-backend-ca-dockerfile
          push: true

      - name: Send job manifest file to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DISTRIBUTOR_INSTANCE_HOST }}
          port: ${{ secrets.DISTRIBUTOR_INSTANCE_SSH_PORT }}
          key: ${{ secrets.DISTRIBUTOR_INSTANCE_SSH_KEY }}
          username: ${{ secrets.DISTRIBUTOR_INSTANCE_PRIMARY_USER }}
          source: "customer-app-backend/template-generator/output-ca-initial-job.yaml,customer-app-backend/template-generator/output-backend-ca-manifest.yaml"
          target: /tmp/customer_app_manifest/${{ github.run_id }}/${{ github.run_number }}
          strip_components: 2

      - name: Deploy customer initial job and application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DISTRIBUTOR_INSTANCE_HOST }}
          port: ${{ secrets.DISTRIBUTOR_INSTANCE_SSH_PORT }}
          key: ${{ secrets.DISTRIBUTOR_INSTANCE_SSH_KEY }}
          username: ${{ secrets.DISTRIBUTOR_INSTANCE_PRIMARY_USER }}
          script: |
            microk8s kubectl apply -f  /tmp/customer_app_manifest/${{ github.run_id }}/${{ github.run_number }}/output-ca-initial-job.yaml
            microk8s kubectl wait --for=condition=complete -f /tmp/customer_app_manifest/${{ github.run_id }}/${{ github.run_number }}/output-ca-initial-job.yaml
            microk8s kubectl apply -f  /tmp/customer_app_manifest/${{ github.run_id }}/${{ github.run_number }}/output-backend-ca-manifest.yaml
