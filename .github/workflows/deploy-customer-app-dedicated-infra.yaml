name: Deploy customer-managed application
run-name: Deploy customer application

on:
  workflow_dispatch:
    inputs:
      customer_provider:
        description: "Customer hosting provider"
        type: string
      customer_name:
        description: "Name of the customer"
        type: string
      customer_credential_file:
        description: "gsutil URI to customer credenttial file"
        type: string
      customer_app_config_blob:
        description: "gsutil URI to customer app configuration file"
        type: string
      customer_app_name:
        description: "Name of the customer app"
        type: string
      fe_github_user:
        description: "GitHub user for frontend application"
        type: string
      fe_github_repo:
        description: "GitHub repo for frontend application"
        type: string
      be_github_user:
        description: "GitHub user for backend application"
        type: string
      be_github_repo:
        description: "GitHub repo for backend application"
        type: string

env:
  UAD_DOMAIN: uet-app-distributor.site
  CUSTOMER_APP_ID: ${{ inputs.customer_name }}-${{ intputs.customer_app_name }}

jobs:
  provision_infrastructure:
    runs-on: ubuntu-22.04
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_RUNNER_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Get customer cloud provider credential file
        run: |
          gsutil cat ${{ inputs.customer_credential_file }} > ${{ github.workspace }}/credentials.env

      - name: Checkout terraform-customer-live-repo repository
        uses: actions/checkout@v3
        with:
          repository: uet-app-distributor/terraform-customer-live-repo
          path: terraform-customer-live-repo
          ref: main

      - name: Fetch backend bucket remote state if exists
        id: fetch_backend_bucket_remote_state
        continue-on-error: true
        run: |
          set -a && source ${{ github.workspace }}/credentials.env && set +a
          echo "Trying to fetch backend bucket remote state if exists..."
          cd ${{ github.workspace }}/terraform-customer-live-repo/tfstate_backend
          gsutil cat gs://uet-app-distributor/customer_apps/${{ inputs.customer_name }}/backend_bucket.tfstate > backend_bucket.tfstate
          echo "Backend bucket remote state downloaded successfully."

      - name: Setup backend bucket
        run: |
          set -a && source ${{ github.workspace }}/credentials.env && set +a
          cd ${{ github.workspace }}/terraform-customer-live-repo/tfstate_backend
          terraform init
          terraform apply -auto-approve -state backend_bucket.tfstate
          bucket=$(terraform output --state backend_bucket.tfstate backend_bucket_name)
          echo "backend_bucket_name=$bucket" >> $GITHUB_ENV
          echo "Updating remote state for backend bucket..."
          gsutil cp backend_bucket.tfstate gs://uet-app-distributor/customer_apps/${{ inputs.customer_name }}/backend_bucket.tfstate

      - name: Fetch infrastructure remote state if exists
        id: fetch_infrastructure_remote_state
        continue-on-error: true
        run: |
          set -a && source ${{ github.workspace }}/credentials.env && set +a
          cd ${{ github.workspace }}/terraform-customer-live-repo/environments/customer
          echo "Setting up backend config..."
          echo "bucket = $backend_bucket_name" > backend.config
          echo "Trying to fetch infrastructure remote state if exists..."
          gsutil cat gs://uet-app-distributor/customer_apps/${{ inputs.customer_name }}/infrastructure.tfstate > infrastructure.tfstate
          echo "Infrastructure remote state downloaded successfully."

      - name: Provision customer infrastructure
        run: |
          set -a && source ${{ github.workspace }}/credentials.env && set +a
          cd ${{ github.workspace }}/terraform-customer-live-repo/environments/customer
          terraform init -backend-config backend.config
          terraform apply -auto-approve -state infrastructure.tfstate
          echo "Updating remote state for customer infrastructure..."
          gsutil cp infrastructure.tfstate gs://uet-app-distributor/customer_apps/${{ inputs.customer_name }}/infrastructure.tfstate

  generate_deployment_files:
    runs-on: ubuntu-22.04
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_RUNNER_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Get customer app configuration file
        run: |
          gsutil cp ${{ inputs.customer_app_config_blob }} app_config.yaml
          gsutil cp ${{ inputs.customer_app_config_blob }}.env .env

      - name: Checkout template-generator repository
        uses: actions/checkout@v3
        with:
          repository: uet-app-distributor/template-generator
          path: template-generator
          ref: main

      - name: Generate Dockerfiles, initial job and manifest files
        run: |
          cd template-generator
          pip install -r requirements.txt
          python3 main.py --app-config ${{ github.workspace }}/app_config.yaml --compose True

      - uses: actions/upload-artifact@v3
        with:
          name: deployment-artifacts
          path: |
            ${{ github.workspace }}/template-generator/output-*
            ${{ github.workspace }}/.env

  build_frontend:
    if: inputs.fe_github_repo != 'none' && inputs.fe_github_user != 'none'
    needs: [provision_infrastructure, generate_deployment_files]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout customer app frontend repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.fe_github_user }}/${{ inputs.fe_github_repo }}
          path: customer-app-frontend

      - uses: actions/download-artifact@v3
        with:
          name: deployment-artifacts
          path: ${{ github.workspace }}/customer-app-frontend

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ${{ github.workspace }}/customer-app-frontend
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fe-${{ env.CUSTOMER_APP_ID }}:latest
          file: ${{ github.workspace }}/customer-app-frontend/template-generator/output-frontend-dockerfile
          push: true

  build_backend:
    if: inputs.be_github_repo != 'none' && inputs.be_github_user != 'none'
    needs: [provision_infrastructure, generate_deployment_files]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout customer app backend repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.be_github_user }}/${{ inputs.be_github_repo }}
          path: customer-app-backend

      - uses: actions/download-artifact@v3
        with:
          name: deployment-artifacts
          path: ${{ github.workspace }}/customer-app-backend

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ${{ github.workspace }}/customer-app-backend
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/be-${{ env.CUSTOMER_APP_ID }}:latest
          file: ${{ github.workspace }}/customer-app-backend/template-generator/output-backend-dockerfile
          push: true

  deploy_customer_apps:
    needs: [build_frontend, build_backend]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: deployment-artifacts
          path: ${{ github.workspace }}/deploy-artifacts

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_RUNNER_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Get customer instance public IP
        id: get_customer_instance_public_ip
        run: |
          gsutil cp gs://uet-app-distributor/customer_apps/${{ inputs.customer_name }}/infrastructure.tfstate infrastructure.tfstate
          PUBLIC_IP=$(terraform output -state infrastructure.tfstate customer_app_instance_public_ip)
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Send deploy artifacts to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ steps.get_customer_instance_public_ip.outputs.public_ip }}
          key: ${{ secrets.CUSTOMER_INSTANCE_PRIVATE_SSH_KEY }}
          username: ubuntu
          source: deploy-artifacts/output-compose.yaml
          target: /home/ubuntu
          strip_components: 1

      - name: Deploy customer applications
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.get_customer_instance_public_ip.outputs.public_ip }}
          key: ${{ secrets.CUSTOMER_INSTANCE_PRIVATE_SSH_KEY }}
          username: ubuntu
          script: |
            docker compose -f /home/ubuntu/output-compose.yaml up -d
